#!/usr/bin/env bash

. "${LIB_DIR:-$(cd "${0%/*}/lib"&&pwd)}/common.sh"

export ETH_FROM="0x16fb96a5fa0427af0c8f7cf1eb4870231c8154b6"
#${ETH_FROM:-$(seth rpc eth_coinbase)}

# dappBuild

{ test -z "$1" || test -z "$2" || test -z "$3"; } && exit 1

tok=$1
ilk="${1}-${2}"
ilkVar="${1}_${2}"
ilkJoin=$3 # adapter contract name
decimals=$4

# Deploy ETH ilk (adapter, spotter, flip and init variables)
test -z "$MCD_DEPLOY" && exit 1

MCD_VAT=0x$(seth call "$MCD_DEPLOY" "vat()(address)")
contract=$(dapp create "$ilkJoin" "$MCD_VAT" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")" "$(eval echo "\$${tok}")" "$decimals")
eval export "\MCD_JOIN_${ilkVar}=${contract}"
seth send "$MCD_DEPLOY" "deployCollateral(bytes32,address,address)" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")" "$(eval echo "\$MCD_JOIN_${ilkVar}")" "$(eval echo "\$PIP_${tok}")"
while IFS=$'\n' read -r line; do data+=("$line"); done < <(seth call "$MCD_DEPLOY" "ilks(bytes32)(address,address)" "$(seth --to-bytes32 "$(seth --from-ascii "$ilk")")")
eval export "\MCD_FLIP_${ilkVar}=0x${data[0]}"

cat > "$ADDRESS_DIR/load-ilk-$(echo "$ilk" | tr '[:upper:]' '[:lower:]')-$(seth chain)" << EOF
#!/bin/bash

# ilk deployment on $(seth chain) from $(git rev-parse HEAD)
# $(date)
export PIP_${tok}=$(eval echo "\$PIP_${tok}")
export ${tok}=$(eval echo "\$${tok}")
export MCD_JOIN_${ilkVar}=$(eval echo "\$MCD_JOIN_${ilkVar}")
export MCD_FLIP_${ilkVar}=$(eval echo "\$MCD_FLIP_${ilkVar}")
EOF